#!/usr/bin/env python

import argparse
import gnupg
import getpass
import os
import sys
import yaml

class Creds(object):
    def __init__(self, config="conf.yaml", verbose=False):
        config = self.load_yaml(self.__read(config, "r"))
        
        # copy all the config keys into self
        for attr in config:
            self.__dict__[attr] = config[attr]

        # check to see if there's actually an agent in the env
        self.agent = os.environ.get("GPG_AGENT_INFO", False)
        self.verbose = verbose

        # wanting to use an agent is cool, but if you don't have one...
        if self.use_agent and self.agent:
            self.gpg = gnupg.GPG(gnupghome=self.gpg_home, use_agent=self.use_agent, verbose=self.verbose)
        else:
            # whether this is the setting or the fallback, it's definitely False henceforth
            self.use_agent = False
            self.passphrase = getpass.getpass()
            self.gpg = gnupg.GPG(gnupghome=self.gpg_home, passphrase=self.passphrase, verbose=self.verbose)

    def __read(self, path, mode):
        try:
            stream = open(path, mode)
        except IOError, err:
            raise Exception(err.strerror, err.filename)
        else:
            return stream
    
    def get_path(self, cred):
        return self.passwords + cred + self.extension

    def get(self, cred):
        path = self.get_path(cred)
        encrypted = self.__read(path, "rb")
        decrypted = str(self.gpg.decrypt_file(encrypted))

        if not decrypted:
            raise Exception("No Contents", "the file %s has no contents" % path)
        else:
            try:
                credentials = yaml.load(decrypted)
            except yaml.YAMLError, err:
                # surpress most of YAMLError to avoid sending a stacktrace with a password to stderr
                raise Exception(err.context, err.problem)
            else:
                return credentials

    def load_yaml(self, data):
        try:
            data = yaml.load(data)
            return data
        except yaml.YAMLError:
            raise

def main():
    parser = argparse.ArgumentParser(description="Query passwords from GPG encrypted files.")
    parser.add_argument('-l', dest='list_keys', action='store_true', help='List the keys in a credential.')
    parser.add_argument('name', help="The name of the credential to look up.")
    parser.add_argument('fields', default=False, nargs="*",
        help="The name of the field or fields to retrieve. If no fields are specified, all fields are returned.")
    
    arg = parser.parse_args()

    try:
        creds = Creds()
        cred = creds.get(arg.name)
    except Exception, (errno, strerr):
        sys.stderr.write('%s: %s\n' % (errno, strerr))
        status = 1
    else:
        if arg.fields:
            for field in arg.fields:
                print cred[field]
        else:
            # only list the available keys in the credential
            if arg.list_keys:
                for field in cred:
                    print field
            else:
                for field in cred:
                    print "%s: %s" % (field, cred[field])
        status = 0
    
    return status

if __name__ == "__main__":
    sys.exit(main())
